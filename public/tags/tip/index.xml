<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tip on Literate DevOps</title>
    <link>https://literate-devops.io/tags/tip/</link>
    <description>Recent content in tip on Literate DevOps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Â© 2023 James Hilling</copyright><atom:link href="https://literate-devops.io/tags/tip/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NodePort</title>
      <link>https://literate-devops.io/kubernetes/nodeport/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://literate-devops.io/kubernetes/nodeport/</guid>
      <description>A NodePort service provides external access to Kubernetes applications by creating a listening port on each node in the cluster. You can connect to the service by simply using the port and IP addresses from one of these nodes.
Pitfall: nodeport can only use ports 30000 to 32767.
Create a nodeport service Imperative command:
kubectl create service nodeport $NAME --namespace=default --node-port=$NODEPORT --tcp=$PORT:$TARGETPORT Pitfall: the label selector on the service will have to be updated manually, since this command does not directly expose any application.</description>
    </item>
    
    <item>
      <title>Exposing</title>
      <link>https://literate-devops.io/kubernetes/exposing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://literate-devops.io/kubernetes/exposing/</guid>
      <description>Expose a Kubernetes object to a service.
Imperative command:
kubectl expose $RESOURCE/$NAME --name=$SERVICE_NAME --namespace=default --port=$PORT --protocol=TCP --selector=$LABELS --target-port=$PORT --type=$SERVICE_TYPE Pitfall: the kubectl expose command will not generate the nodePort field for you automatically, whereas kubectl create service nodeport will. Another difference between these two commands is that the expose command will fail if the resource does not exist beforehand, whereas the create command will not.
You can also use the --expose option with the kubectl run command, when you only need to expose a pod:</description>
    </item>
    
    <item>
      <title>Kubernetes documentation</title>
      <link>https://literate-devops.io/kubernetes/documentation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://literate-devops.io/kubernetes/documentation/</guid>
      <description>Use the kubectl explain command to output Kubernetes documentation for a particular resource.
Examples
Show the documentation for the ReplicaSet resource:
kubectl explain ReplicaSet | head --lines=10 Recursive output shows all nested fields within the resource:
kubectl explain ReplicaSet.spec --recursive </description>
    </item>
    
    <item>
      <title>Tolerations</title>
      <link>https://literate-devops.io/kubernetes/tolerations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://literate-devops.io/kubernetes/tolerations/</guid>
      <description>A toleration allows a pod to be scheduled on any node with a matching taint.
Add tolerations to a pod Example manifest:
1apiVersion: v1 2kind: Pod 3metadata: 4 name: nginx 5 namespace: default 6 labels: 7 app: nginx 8spec: 9 tolerations: 10 - key: &amp;#34;app&amp;#34; 11 operator: &amp;#34;Equal&amp;#34; 12 value: &amp;#34;nginx&amp;#34; 13 effect: &amp;#34;NoSchedule&amp;#34; 14 - key: &amp;#34;gpu&amp;#34; 15 operator: &amp;#34;Exists&amp;#34; 16 effect: &amp;#34;NoSchedule&amp;#34; 17 containers: 18 - name: nginx 19 image: nginx Toleration operators:</description>
    </item>
    
    <item>
      <title>Node affinity</title>
      <link>https://literate-devops.io/kubernetes/nodeaffinity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://literate-devops.io/kubernetes/nodeaffinity/</guid>
      <description>Node affinity affects what nodes a pod can be scheduled on, using a selection of labels and operator logic.
Example manifest:
1apiVersion: v1 2kind: Pod 3metadata: 4 name: nginx 5 namespace: default 6 labels: 7 app: nginx 8spec: 9 containers: 10 - name: nginx 11 image: nginx 12 affinity: 13 nodeAffinity: 14 requiredDuringSchedulingIgnoredDuringExecution: 15 nodeSelectorTerms: 16 - matchExpressions: 17 - key: compute 18 operator: In 19 values: 20 - large 21 - medium 22 - key: compute 23 operator: NotIn 24 values: 25 - small 26 - key: gpu 27 operator: Exists 28 - key: quantum 29 operator: DoesNotExist CKA Exam Tip: node affinity requires that you reference the kubernetes.</description>
    </item>
    
    <item>
      <title>ResourceQuota</title>
      <link>https://literate-devops.io/kubernetes/resourcequota/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://literate-devops.io/kubernetes/resourcequota/</guid>
      <description>Limit aggregate resource consumption per namespace.
Create a namespace-scoped resource quota Imperative command:
kubectl create quota $NAME --hard=persistentvolumeclaims=10,pods=10,replicationcontrollers=2,resourcequotas=2,secrets=10,services=2,limits.cpu=500m,limits.memory=2048Mi,requests.cpu=250m,requests.memory=1024Mi --namespace=$NAMESPACE Example manifest:
1apiVersion: v1 2kind: ResourceQuota 3metadata: 4 name: dev-quota 5 namespace: dev 6spec: 7 hard: 8 persistentvolumeclaims: &amp;#34;10&amp;#34; 9 pods: &amp;#34;10&amp;#34; 10 replicationcontrollers: &amp;#34;2&amp;#34; 11 resourcequotas: &amp;#34;2&amp;#34; 12 secrets: &amp;#34;10&amp;#34; 13 services: &amp;#34;2&amp;#34; 14 limits.cpu: 500m 15 limits.memory: 2Gi 16 requests.cpu: 250m 17 requests.memory: 1Gi CKA Exam Tip: resource quotas require that you reference the kubernetes.</description>
    </item>
    
  </channel>
</rss>
